#include <gatb/gatb_core.hpp>
#include <iostream>
#include <fstream>
#include <Barcode.hpp>
#include <string>
#include <bits/stdc++.h>
#include <math.h>

/********************************************************************************/
/*                                                                              */
/*             Compare.cpp                                                                    */
/* this is a very simple tool for counting the number of shared barcodes between to list          */
/**********************************************************************************************/

int main (int argc, char* argv[])
{

    static const char* LIST1 = "-list1";
    static const char* LIST2 = "-list2";

    OptionsParser parser ("getLists");

    parser.push_back (new OptionOneParam (LIST1, "first list of barcodes",   false));
    parser.push_back (new OptionOneParam (LIST2, "second list of barcodes",   false));

    try
    {
        IProperties* options = parser.parse (argc, argv);

        string list1 = options->getStr(LIST1);
        string list2 = options->getStr(LIST2);

        cout << "universe : " <<   pow(4,BARCODE_SIZE) ;
        bitset<(long unsigned int) pow(4,BARCODE_SIZE)> bset1(0);
        bitset<(long long unsigned int) pow(4,BARCODE_SIZE)> bset2(0);

        ifstream barcodes1 (list1);
         if (barcodes1.is_open()){
            string barcode;
            while ( getline (barcodes1,barcode) ){
              Barcode bc(barcode);
              bset1[bc.index]=1;
              cout << "barcode : " << bc.barcode << " index " << bc.index << "\n";
            }
        }
         barcodes1.close();

        ifstream barcodes2 (list2);
        if (barcodes2.is_open()){
            string barcode;
            while (getline (barcodes2,barcode) ){
              Barcode bc(barcode);
              bset2[bc.index]=1;
            }
        }
        barcodes2.close();

        bitset<(long long unsigned int) pow(4,BARCODE_SIZE)> intersect = bset1 & bset2;
        long int numberof1=0;
        numberof1 = intersect.count();

        cout << "number of 1 : " << numberof1 << "\n";
      }

      catch (Exception& e)
        {
            std::cerr << "EXCEPTION: " << e.getMessage() << std::endl;
        }
}
